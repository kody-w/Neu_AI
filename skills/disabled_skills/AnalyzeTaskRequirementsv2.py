from skills.basic_skill import BasicSkill
from skills.learn_new_skill_skill import LearnNewSkillSkill
from skills.create_autogen_group_chat_skill import AutoGenGroupChatSkill
from skills.python_script_skill import PythonScriptSkill
from skills.manage_memory_skill import ManageMemorySkill


class AnalyzeTaskRequirementsSkill(BasicSkill):
    def __init__(self):
        self.name = "AnalyzeTaskRequirements"
        self.metadata = {
            "name": self.name,
            "description": "Collect information about a task and communicate the necessary skills and tools required to fulfill the task to a file. It can also learn new skills, create autogenerated group chats, run Python scripts, and manage memory.",
            "parameters": {
                "type": "object",
                "properties": {
                    "task_description": {
                        "type": "string",
                        "description": "A detailed, step-by-step description of the task to be performed. Include all relevant information, such as the goal of the task, any specific requirements or constraints, and the expected outcome."
                    },
                    "skill_mappings": {
                        "type": "object",
                        "description": "A dictionary where the keys are lowercase keywords or phrases related to skills, and the values are the corresponding full skill names. For example: {'python': 'Python Programming', 'communication': 'Effective Communication'}."
                    },
                    "tool_mappings": {
                        "type": "object",
                        "description": "A dictionary where the keys are lowercase keywords or phrases related to tools, and the values are the corresponding full tool names. For example: {'spreadsheet': 'Microsoft Excel', 'email': 'Gmail'}."
                    },
                    "output_file": {
                        "type": "string",
                        "description": "The name of the file where the task requirements will be written. Provide the file name with the appropriate extension (e.g., 'task_requirements.txt'). The file will be created in the current working directory."
                    },
                    "learn_new_skills": {
                        "type": "boolean",
                        "description": "Set to true if you want the skill to attempt to learn new skills based on the task requirements. If set to false, the skill will only use the provided skill mappings."
                    },
                    "create_group_chat": {
                        "type": "boolean",
                        "description": "Set to true if you want the skill to create an autogenerated group chat for the task. If set to false, no group chat will be created."
                    },
                    "run_script": {
                        "type": "boolean",
                        "description": "Set to true if you want the skill to run a Python script related to the task. If set to false, no script will be run."
                    },
                    "manage_memory": {
                        "type": "boolean",
                        "description": "Set to true if you want the skill to manage memory related to the task. If set to false, memory management will be skipped."
                    },
                    "new_skill_dir": {
                        "type": "string",
                        "description": "The directory where new skill files will be created. Provide the full path to the directory. Ensure that the directory exists and the script has write permissions for that directory."
                    },
                    "group_chat_config": {
                        "type": "object",
                        "description": "The configuration for creating an autogenerated group chat. This parameter is required if 'create_group_chat' is set to true.",
                        "properties": {
                            "num_participants": {
                                "type": "integer",
                                "description": "The number of participants to include in the group chat. Provide a positive integer value."
                            },
                            "max_turns": {
                                "type": "integer",
                                "description": "The maximum number of turns (message exchanges) allowed in the group chat. Provide a positive integer value."
                            },
                            "assistant_instructions": {
                                "type": "string",
                                "description": "The instructions or guidelines for the assistant participating in the group chat. Provide clear and specific instructions to guide the assistant's behavior and responses."
                            },
                            "leader_instructions": {
                                "type": "string",
                                "description": "The instructions or guidelines for the leader of the group chat. Provide clear and specific instructions to guide the leader's behavior, moderation, and decision-making."
                            },
                            "roles_and_responsibilities": {
                                "type": "array",
                                "description": "An array of objects specifying the roles and responsibilities of each participant in the group chat. Each object should have a 'role' (string) and 'responsibilities' (string) property.",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "role": {
                                            "type": "string",
                                            "description": "The role assigned to the participant (e.g., 'Researcher', 'Analyst', 'Facilitator')."
                                        },
                                        "responsibilities": {
                                            "type": "string",
                                            "description": "The specific responsibilities and tasks assigned to the participant based on their role."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "script_path": {
                        "type": "string",
                        "description": "The full path to the Python script to be run. Ensure that the script exists at the provided path and the script has the necessary permissions to be executed."
                    },
                    "memory_config": {
                        "type": "object",
                        "description": "The configuration for managing memory related to the task. This parameter is required if 'manage_memory' is set to true.",
                        "properties": {
                            "conversation_id": {
                                "type": "string",
                                "description": "A unique identifier for the conversation or task. Provide a descriptive and meaningful ID."
                            },
                            "companion_id": {
                                "type": "string",
                                "description": "A unique identifier for the companion or assistant involved in the task. Provide a descriptive and meaningful ID."
                            },
                            "mood": {
                                "type": "string",
                                "description": "The desired mood or tone for the conversation or task (e.g., 'professional', 'friendly', 'formal')."
                            },
                            "theme": {
                                "type": "string",
                                "description": "The main theme or topic of the conversation or task (e.g., 'project planning', 'customer support', 'brainstorming')."
                            }
                        }
                    }
                },
                "required": ["task_description", "output_file", "learn_new_skills", "create_group_chat", "run_script", "manage_memory", "new_skill_dir"]
            }
        }
        super().__init__(name=self.name, metadata=self.metadata)

    def perform(self, task_description, output_file, learn_new_skills, create_group_chat, run_script, manage_memory, new_skill_dir, skill_mappings=None, tool_mappings=None, group_chat_config=None, script_path=None, memory_config=None):
        try:
            # Step 1: Initialize the required skills and tools
            required_skills_and_tools = {
                "task_description": task_description,
                "required_skills": [],
                "required_tools": []
            }

            # Step 2: Analyze the task description and determine the necessary skills and tools
            if skill_mappings is not None:
                for keyword, skill in skill_mappings.items():
                    if keyword.lower() in task_description.lower():
                        required_skills_and_tools["required_skills"].append(skill)

            if tool_mappings is not None:
                for keyword, tool in tool_mappings.items():
                    if keyword.lower() in task_description.lower():
                        required_skills_and_tools["required_tools"].append(tool)

            # Step 3: Convert the requirements to a string to write to a file
            requirements_text = f"Task Description: {required_skills_and_tools['task_description']}\n"
            requirements_text += f"Required Skills: {', '.join(required_skills_and_tools['required_skills'])}\n"
            requirements_text += f"Required Tools: {', '.join(required_skills_and_tools['required_tools'])}\n"

            # Step 4: Write the requirements to a file
            with open(output_file, "w") as file:
                file.write(requirements_text)

            # Step 5: Learn new skills if specified
            if learn_new_skills:
                learn_skill = LearnNewSkillSkill()
                for skill in required_skills_and_tools["required_skills"]:
                    if skill_mappings is None or skill not in skill_mappings.values():
                        skill_name = skill.replace(" ", "")
                        skill_implementation = f"""
from skills.basic_skill import BasicSkill

class {skill_name}Skill(BasicSkill):
    def __init__(self):
        self.name = "{skill_name}"
        self.metadata = {{
            "name": self.name,
            "description": "A skill to perform {skill}.",
            "parameters": {{
                "type": "object",
                "properties": {{
                    "input": {{
                        "type": "string",
                        "description": "The input for {skill}."
                    }}
                }},
                "required": ["input"]
            }}
        }}
        super().__init__(name=self.name, metadata=self.metadata)

    def perform(self, input):
        # Implement the logic for {skill} here
        return f"Performed {skill} on input: {{input}}"
"""
                        skill_file = f"{new_skill_dir}/{skill_name}_skill.py"
                        learn_skill.perform(skill_name=skill_name, python_implementation=skill_implementation, file_name=skill_file)

            # Step 6: Create an autogenerated group chat if specified
            if create_group_chat:
                if group_chat_config is None:
                    raise ValueError("'group_chat_config' parameter is required when 'create_group_chat' is set to true.")
                create_group_chat_skill = CreateAutoGenGroupChatSkill()
                group_chat_result = create_group_chat_skill.perform(
                    task_name=task_description,
                    task_description=task_description,
                    **group_chat_config
                )
                requirements_text += f"\nGroup Chat Result:\n{group_chat_result}"

            # Step 7: Run a Python script if specified
            if run_script:
                if script_path is None:
                    raise ValueError("'script_path' parameter is required when 'run_script' is set to true.")
                python_script_skill = PythonScriptSkill()
                script_result = python_script_skill.perform(script_path=script_path)
                requirements_text += f"\nScript Result:\n{script_result}"

            # Step 8: Manage memory if specified
            if manage_memory:
                if memory_config is None:
                    raise ValueError("'memory_config' parameter is required when 'manage_memory' is set to true.")
                manage_memory_skill = ManageMemorySkill()
                memory_result = manage_memory_skill.perform(
                    conversation_context=requirements_text,
                    **memory_config
                )
                requirements_text += f"\nMemory Result:\n{memory_result}"

            # Step 9: Return the final output
            return f"Task requirements analysis completed. Results written to '{output_file}'."
        except Exception as e:
            return str(e)